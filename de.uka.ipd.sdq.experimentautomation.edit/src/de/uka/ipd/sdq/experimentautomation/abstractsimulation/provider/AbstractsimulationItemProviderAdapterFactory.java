/**
 */
package de.uka.ipd.sdq.experimentautomation.abstractsimulation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.uka.ipd.sdq.experimentautomation.abstractsimulation.util.AbstractsimulationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The
 * adapters generated by this factory convert EMF adapter notifications into calls to
 * {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class AbstractsimulationItemProviderAdapterFactory extends AbstractsimulationAdapterFactory implements
        ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType
     * isFactoryForType}. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public AbstractsimulationItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.RandomNumberGeneratorSeed}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected RandomNumberGeneratorSeedItemProvider randomNumberGeneratorSeedItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.RandomNumberGeneratorSeed}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createRandomNumberGeneratorSeedAdapter() {
        if (randomNumberGeneratorSeedItemProvider == null) {
            randomNumberGeneratorSeedItemProvider = new RandomNumberGeneratorSeedItemProvider(this);
        }

        return randomNumberGeneratorSeedItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.ProbeSpecConfiguration}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ProbeSpecConfigurationItemProvider probeSpecConfigurationItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.ProbeSpecConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createProbeSpecConfigurationAdapter() {
        if (probeSpecConfigurationItemProvider == null) {
            probeSpecConfigurationItemProvider = new ProbeSpecConfigurationItemProvider(this);
        }

        return probeSpecConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.SensorFramework} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SensorFrameworkItemProvider sensorFrameworkItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.SensorFramework}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSensorFrameworkAdapter() {
        if (sensorFrameworkItemProvider == null) {
            sensorFrameworkItemProvider = new SensorFrameworkItemProvider(this);
        }

        return sensorFrameworkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.MemoryDatasource} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MemoryDatasourceItemProvider memoryDatasourceItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.MemoryDatasource}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMemoryDatasourceAdapter() {
        if (memoryDatasourceItemProvider == null) {
            memoryDatasourceItemProvider = new MemoryDatasourceItemProvider(this);
        }

        return memoryDatasourceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.FileDatasource} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected FileDatasourceItemProvider fileDatasourceItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.FileDatasource}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createFileDatasourceAdapter() {
        if (fileDatasourceItemProvider == null) {
            fileDatasourceItemProvider = new FileDatasourceItemProvider(this);
        }

        return fileDatasourceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.MeasurementCountStopCondition}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MeasurementCountStopConditionItemProvider measurementCountStopConditionItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.MeasurementCountStopCondition}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMeasurementCountStopConditionAdapter() {
        if (measurementCountStopConditionItemProvider == null) {
            measurementCountStopConditionItemProvider = new MeasurementCountStopConditionItemProvider(this);
        }

        return measurementCountStopConditionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.SimTimeStopCondition}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SimTimeStopConditionItemProvider simTimeStopConditionItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.uka.ipd.sdq.experimentautomation.abstractsimulation.SimTimeStopCondition}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSimTimeStopConditionAdapter() {
        if (simTimeStopConditionItemProvider == null) {
            simTimeStopConditionItemProvider = new SimTimeStopConditionItemProvider(this);
        }

        return simTimeStopConditionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public void dispose() {
        if (randomNumberGeneratorSeedItemProvider != null)
            randomNumberGeneratorSeedItemProvider.dispose();
        if (probeSpecConfigurationItemProvider != null)
            probeSpecConfigurationItemProvider.dispose();
        if (sensorFrameworkItemProvider != null)
            sensorFrameworkItemProvider.dispose();
        if (memoryDatasourceItemProvider != null)
            memoryDatasourceItemProvider.dispose();
        if (fileDatasourceItemProvider != null)
            fileDatasourceItemProvider.dispose();
        if (measurementCountStopConditionItemProvider != null)
            measurementCountStopConditionItemProvider.dispose();
        if (simTimeStopConditionItemProvider != null)
            simTimeStopConditionItemProvider.dispose();
    }

}
