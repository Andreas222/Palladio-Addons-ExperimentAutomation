/*
 * generated by Xtext 2.12.0
 */
grammar InternalExpAuto;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.palladiosimulator.experimentautomation.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.palladiosimulator.experimentautomation.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.palladiosimulator.experimentautomation.dsl.services.ExpAutoGrammarAccess;

}

@parser::members {

 	private ExpAutoGrammarAccess grammarAccess;

    public InternalExpAutoParser(TokenStream input, ExpAutoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ExpAutoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDatasourcesDatasourceParserRuleCall_1_0());
				}
				lv_datasources_1_0=ruleDatasource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"datasources",
						lv_datasources_1_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.Datasource");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getExperimentsExperimentParserRuleCall_2_0());
				}
				lv_experiments_2_0=ruleExperiment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"experiments",
						lv_experiments_2_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.Experiment");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getImportAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleDatasource
entryRuleDatasource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatasourceRule()); }
	iv_ruleDatasource=ruleDatasource
	{ $current=$iv_ruleDatasource.current; }
	EOF;

// Rule Datasource
ruleDatasource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datasource'
		{
			newLeafNode(otherlv_0, grammarAccess.getDatasourceAccess().getDatasourceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDatasourceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatasourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDatasourceAccess().getColonKeyword_2());
		}
		(
			(
				lv_sourceType_3_0='EDP2'
				{
					newLeafNode(lv_sourceType_3_0, grammarAccess.getDatasourceAccess().getSourceTypeEDP2Keyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatasourceRule());
					}
					setWithLastConsumed($current, "sourceType", lv_sourceType_3_0, "EDP2");
				}
			)
		)
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getDatasourceAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					lv_sourceURI_5_0=RULE_STRING
					{
						newLeafNode(lv_sourceURI_5_0, grammarAccess.getDatasourceAccess().getSourceURISTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDatasourceRule());
						}
						setWithLastConsumed(
							$current,
							"sourceURI",
							lv_sourceURI_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getDatasourceAccess().getRightParenthesisKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleExperiment
entryRuleExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExperimentRule()); }
	iv_ruleExperiment=ruleExperiment
	{ $current=$iv_ruleExperiment.current; }
	EOF;

// Rule Experiment
ruleExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='experiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getExperimentAccess().getExperimentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExperimentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getExperimentAccess().getColonKeyword_2());
		}
		(
			(
				(
					lv_design_3_1='FullFactorial'
					{
						newLeafNode(lv_design_3_1, grammarAccess.getExperimentAccess().getDesignFullFactorialKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExperimentRule());
						}
						setWithLastConsumed($current, "design", lv_design_3_1, null);
					}
					    |
					lv_design_3_2='OneFactor'
					{
						newLeafNode(lv_design_3_2, grammarAccess.getExperimentAccess().getDesignOneFactorKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExperimentRule());
						}
						setWithLastConsumed($current, "design", lv_design_3_2, null);
					}
				)
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getExperimentAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExperimentAccess().getExperimentSpecificationsExperimentSpecificationsParserRuleCall_5_0());
				}
				lv_experimentSpecifications_5_0=ruleExperimentSpecifications
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentRule());
					}
					set(
						$current,
						"experimentSpecifications",
						lv_experimentSpecifications_5_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExperimentSpecifications");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getExperimentAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleExperimentSpecifications
entryRuleExperimentSpecifications returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExperimentSpecificationsRule()); }
	iv_ruleExperimentSpecifications=ruleExperimentSpecifications
	{ $current=$iv_ruleExperimentSpecifications.current; }
	EOF;

// Rule ExperimentSpecifications
ruleExperimentSpecifications returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsDescriptionParserRuleCall_0_0());
				}
				lv_specifications_0_1=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_1,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.Description");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsInitialModelParserRuleCall_0_1());
				}
				lv_specifications_0_2=ruleInitialModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_2,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.InitialModel");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsVariationParserRuleCall_0_2());
				}
				lv_specifications_0_3=ruleVariation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_3,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.Variation");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsStopTimeConditionParserRuleCall_0_3());
				}
				lv_specifications_0_4=ruleStopTimeCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_4,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.StopTimeCondition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsStopCountConditionParserRuleCall_0_4());
				}
				lv_specifications_0_5=ruleStopCountCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_5,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.StopCountCondition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsNumberOfExperimentsParserRuleCall_0_5());
				}
				lv_specifications_0_6=ruleNumberOfExperiments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_6,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.NumberOfExperiments");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsToolDefinitionParserRuleCall_0_6());
				}
				lv_specifications_0_7=ruleToolDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_7,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ToolDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsSeedDefinitionParserRuleCall_0_7());
				}
				lv_specifications_0_8=ruleSeedDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_8,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.SeedDefinition");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getExperimentSpecificationsAccess().getSpecificationsExperimentDatasourceParserRuleCall_0_8());
				}
				lv_specifications_0_9=ruleExperimentDatasource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExperimentSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_9,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExperimentDatasource");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='description'
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getDescriptionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInitialModel
entryRuleInitialModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialModelRule()); }
	iv_ruleInitialModel=ruleInitialModel
	{ $current=$iv_ruleInitialModel.current; }
	EOF;

// Rule InitialModel
ruleInitialModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='initial'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialModelAccess().getInitialKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialModelAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_modeltyp_2_0='PCM'
				{
					newLeafNode(lv_modeltyp_2_0, grammarAccess.getInitialModelAccess().getModeltypPCMKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialModelRule());
					}
					setWithLastConsumed($current, "modeltyp", lv_modeltyp_2_0, "PCM");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialModelAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialModelAccess().getInitSpecificationsInitSpecificationsParserRuleCall_4_0());
				}
				lv_initSpecifications_4_0=ruleInitSpecifications
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialModelRule());
					}
					set(
						$current,
						"initSpecifications",
						lv_initSpecifications_4_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.InitSpecifications");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getInitialModelAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleInitSpecifications
entryRuleInitSpecifications returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitSpecificationsRule()); }
	iv_ruleInitSpecifications=ruleInitSpecifications
	{ $current=$iv_ruleInitSpecifications.current; }
	EOF;

// Rule InitSpecifications
ruleInitSpecifications returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitSpecificationsAccess().getSpecificationsAllocationModelParserRuleCall_0_0());
				}
				lv_specifications_0_1=ruleAllocationModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_1,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.AllocationModel");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInitSpecificationsAccess().getSpecificationsUsageModelParserRuleCall_0_1());
				}
				lv_specifications_0_2=ruleUsageModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_2,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.UsageModel");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInitSpecificationsAccess().getSpecificationsMiddlewareRepositoryParserRuleCall_0_2());
				}
				lv_specifications_0_3=ruleMiddlewareRepository
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_3,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.MiddlewareRepository");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInitSpecificationsAccess().getSpecificationsEventMiddlewareRepositoryParserRuleCall_0_3());
				}
				lv_specifications_0_4=ruleEventMiddlewareRepository
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_4,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.EventMiddlewareRepository");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInitSpecificationsAccess().getSpecificationsMonitorRepositoryParserRuleCall_0_4());
				}
				lv_specifications_0_5=ruleMonitorRepository
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_0_5,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.MonitorRepository");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleAllocationModel
entryRuleAllocationModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllocationModelRule()); }
	iv_ruleAllocationModel=ruleAllocationModel
	{ $current=$iv_ruleAllocationModel.current; }
	EOF;

// Rule AllocationModel
ruleAllocationModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='allocation'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllocationModelAccess().getAllocationKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAllocationModelAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_allocation_2_0=RULE_STRING
				{
					newLeafNode(lv_allocation_2_0, grammarAccess.getAllocationModelAccess().getAllocationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAllocationModelRule());
					}
					setWithLastConsumed(
						$current,
						"allocation",
						lv_allocation_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleUsageModel
entryRuleUsageModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsageModelRule()); }
	iv_ruleUsageModel=ruleUsageModel
	{ $current=$iv_ruleUsageModel.current; }
	EOF;

// Rule UsageModel
ruleUsageModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='usageModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsageModelAccess().getUsageModelKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getUsageModelAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_usageModel_2_0=RULE_STRING
				{
					newLeafNode(lv_usageModel_2_0, grammarAccess.getUsageModelAccess().getUsageModelSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUsageModelRule());
					}
					setWithLastConsumed(
						$current,
						"usageModel",
						lv_usageModel_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMiddlewareRepository
entryRuleMiddlewareRepository returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMiddlewareRepositoryRule()); }
	iv_ruleMiddlewareRepository=ruleMiddlewareRepository
	{ $current=$iv_ruleMiddlewareRepository.current; }
	EOF;

// Rule MiddlewareRepository
ruleMiddlewareRepository returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='middlewareRepository'
		{
			newLeafNode(otherlv_0, grammarAccess.getMiddlewareRepositoryAccess().getMiddlewareRepositoryKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getMiddlewareRepositoryAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_middlewareRepository_2_0=RULE_STRING
				{
					newLeafNode(lv_middlewareRepository_2_0, grammarAccess.getMiddlewareRepositoryAccess().getMiddlewareRepositorySTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMiddlewareRepositoryRule());
					}
					setWithLastConsumed(
						$current,
						"middlewareRepository",
						lv_middlewareRepository_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEventMiddlewareRepository
entryRuleEventMiddlewareRepository returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventMiddlewareRepositoryRule()); }
	iv_ruleEventMiddlewareRepository=ruleEventMiddlewareRepository
	{ $current=$iv_ruleEventMiddlewareRepository.current; }
	EOF;

// Rule EventMiddlewareRepository
ruleEventMiddlewareRepository returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='eventMiddlewareRepository'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventMiddlewareRepositoryAccess().getEventMiddlewareRepositoryKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEventMiddlewareRepositoryAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_eventMiddelwareRepository_2_0=RULE_STRING
				{
					newLeafNode(lv_eventMiddelwareRepository_2_0, grammarAccess.getEventMiddlewareRepositoryAccess().getEventMiddelwareRepositorySTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventMiddlewareRepositoryRule());
					}
					setWithLastConsumed(
						$current,
						"eventMiddelwareRepository",
						lv_eventMiddelwareRepository_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMonitorRepository
entryRuleMonitorRepository returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMonitorRepositoryRule()); }
	iv_ruleMonitorRepository=ruleMonitorRepository
	{ $current=$iv_ruleMonitorRepository.current; }
	EOF;

// Rule MonitorRepository
ruleMonitorRepository returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='monitorRepository'
		{
			newLeafNode(otherlv_0, grammarAccess.getMonitorRepositoryAccess().getMonitorRepositoryKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getMonitorRepositoryAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_monitorRepository_2_0=RULE_STRING
				{
					newLeafNode(lv_monitorRepository_2_0, grammarAccess.getMonitorRepositoryAccess().getMonitorRepositorySTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMonitorRepositoryRule());
					}
					setWithLastConsumed(
						$current,
						"monitorRepository",
						lv_monitorRepository_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVariation
entryRuleVariation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariationRule()); }
	iv_ruleVariation=ruleVariation
	{ $current=$iv_ruleVariation.current; }
	EOF;

// Rule Variation
ruleVariation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variation'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariationAccess().getVariationKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getVariationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariationRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getVariationAccess().getVariationTypValueVariationCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getVariationAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariationAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='target'
		{
			newLeafNode(otherlv_5, grammarAccess.getVariationAccess().getTargetKeyword_5());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getVariationAccess().getEqualsSignKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariationRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getVariationAccess().getTargetIdentifierCrossReference_7_0());
				}
			)
		)
		otherlv_8='maxVariations'
		{
			newLeafNode(otherlv_8, grammarAccess.getVariationAccess().getMaxVariationsKeyword_8());
		}
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getVariationAccess().getEqualsSignKeyword_9());
		}
		(
			(
				lv_maxVariations_10_0=RULE_INT
				{
					newLeafNode(lv_maxVariations_10_0, grammarAccess.getVariationAccess().getMaxVariationsINTTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariationRule());
					}
					setWithLastConsumed(
						$current,
						"maxVariations",
						lv_maxVariations_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_11='values'
		{
			newLeafNode(otherlv_11, grammarAccess.getVariationAccess().getValuesKeyword_11());
		}
		otherlv_12='='
		{
			newLeafNode(otherlv_12, grammarAccess.getVariationAccess().getEqualsSignKeyword_12());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariationAccess().getValueProviderNestedIntervalsValueProviderParserRuleCall_13_0_0());
					}
					lv_valueProvider_13_1=ruleNestedIntervalsValueProvider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariationRule());
						}
						set(
							$current,
							"valueProvider",
							lv_valueProvider_13_1,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.NestedIntervalsValueProvider");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVariationAccess().getValueProviderSetValueProviderParserRuleCall_13_0_1());
					}
					lv_valueProvider_13_2=ruleSetValueProvider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariationRule());
						}
						set(
							$current,
							"valueProvider",
							lv_valueProvider_13_2,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.SetValueProvider");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVariationAccess().getValueProviderLinearValueProviderParserRuleCall_13_0_2());
					}
					lv_valueProvider_13_3=ruleLinearValueProvider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariationRule());
						}
						set(
							$current,
							"valueProvider",
							lv_valueProvider_13_3,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.LinearValueProvider");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVariationAccess().getValueProviderExponentialValueProviderParserRuleCall_13_0_3());
					}
					lv_valueProvider_13_4=ruleExponentialValueProvider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariationRule());
						}
						set(
							$current,
							"valueProvider",
							lv_valueProvider_13_4,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExponentialValueProvider");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVariationAccess().getValueProviderPolynomialValueProviderParserRuleCall_13_0_4());
					}
					lv_valueProvider_13_5=rulePolynomialValueProvider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariationRule());
						}
						set(
							$current,
							"valueProvider",
							lv_valueProvider_13_5,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.PolynomialValueProvider");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getVariationAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRuleNestedIntervalsValueProvider
entryRuleNestedIntervalsValueProvider returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedIntervalsValueProviderRule()); }
	iv_ruleNestedIntervalsValueProvider=ruleNestedIntervalsValueProvider
	{ $current=$iv_ruleNestedIntervalsValueProvider.current; }
	EOF;

// Rule NestedIntervalsValueProvider
ruleNestedIntervalsValueProvider returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getNestedIntervalsValueProviderAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					lv_min_1_0=RULE_INT
					{
						newLeafNode(lv_min_1_0, grammarAccess.getNestedIntervalsValueProviderAccess().getMinINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNestedIntervalsValueProviderRule());
						}
						setWithLastConsumed(
							$current,
							"min",
							lv_min_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getNestedIntervalsValueProviderAccess().getCommaKeyword_0_2());
			}
			(
				(
					lv_max_3_0=RULE_INT
					{
						newLeafNode(lv_max_3_0, grammarAccess.getNestedIntervalsValueProviderAccess().getMaxINTTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNestedIntervalsValueProviderRule());
						}
						setWithLastConsumed(
							$current,
							"max",
							lv_max_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getNestedIntervalsValueProviderAccess().getRightSquareBracketKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='nestedIntervall'
			{
				newLeafNode(otherlv_5, grammarAccess.getNestedIntervalsValueProviderAccess().getNestedIntervallKeyword_1_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getNestedIntervalsValueProviderAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					lv_min_7_0=RULE_INT
					{
						newLeafNode(lv_min_7_0, grammarAccess.getNestedIntervalsValueProviderAccess().getMinINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNestedIntervalsValueProviderRule());
						}
						setWithLastConsumed(
							$current,
							"min",
							lv_min_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getNestedIntervalsValueProviderAccess().getCommaKeyword_1_3());
			}
			(
				(
					lv_max_9_0=RULE_INT
					{
						newLeafNode(lv_max_9_0, grammarAccess.getNestedIntervalsValueProviderAccess().getMaxINTTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNestedIntervalsValueProviderRule());
						}
						setWithLastConsumed(
							$current,
							"max",
							lv_max_9_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getNestedIntervalsValueProviderAccess().getRightParenthesisKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleSetValueProvider
entryRuleSetValueProvider returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetValueProviderRule()); }
	iv_ruleSetValueProvider=ruleSetValueProvider
	{ $current=$iv_ruleSetValueProvider.current; }
	EOF;

// Rule SetValueProvider
ruleSetValueProvider returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='{'
			{
				newLeafNode(otherlv_0, grammarAccess.getSetValueProviderAccess().getLeftCurlyBracketKeyword_0_0());
			}
			(
				(
					lv_values_1_0=RULE_INT
					{
						newLeafNode(lv_values_1_0, grammarAccess.getSetValueProviderAccess().getValuesINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetValueProviderRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getSetValueProviderAccess().getCommaKeyword_0_2_0());
				}
				(
					(
						lv_values_3_0=RULE_INT
						{
							newLeafNode(lv_values_3_0, grammarAccess.getSetValueProviderAccess().getValuesINTTerminalRuleCall_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetValueProviderRule());
							}
							addWithLastConsumed(
								$current,
								"values",
								lv_values_3_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getSetValueProviderAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			otherlv_5='setValues'
			{
				newLeafNode(otherlv_5, grammarAccess.getSetValueProviderAccess().getSetValuesKeyword_1_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getSetValueProviderAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					lv_values_7_0=RULE_INT
					{
						newLeafNode(lv_values_7_0, grammarAccess.getSetValueProviderAccess().getValuesINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetValueProviderRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getSetValueProviderAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						lv_values_9_0=RULE_INT
						{
							newLeafNode(lv_values_9_0, grammarAccess.getSetValueProviderAccess().getValuesINTTerminalRuleCall_1_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetValueProviderRule());
							}
							addWithLastConsumed(
								$current,
								"values",
								lv_values_9_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)*
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getSetValueProviderAccess().getRightParenthesisKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleLinearValueProvider
entryRuleLinearValueProvider returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinearValueProviderRule()); }
	iv_ruleLinearValueProvider=ruleLinearValueProvider
	{ $current=$iv_ruleLinearValueProvider.current; }
	EOF;

// Rule LinearValueProvider
ruleLinearValueProvider returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='linear'
		{
			newLeafNode(otherlv_0, grammarAccess.getLinearValueProviderAccess().getLinearKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLinearValueProviderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_summand_2_0=RULE_INT
				{
					newLeafNode(lv_summand_2_0, grammarAccess.getLinearValueProviderAccess().getSummandINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinearValueProviderRule());
					}
					setWithLastConsumed(
						$current,
						"summand",
						lv_summand_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLinearValueProviderAccess().getCommaKeyword_3());
		}
		(
			(
				lv_factor_4_0=RULE_INT
				{
					newLeafNode(lv_factor_4_0, grammarAccess.getLinearValueProviderAccess().getFactorINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinearValueProviderRule());
					}
					setWithLastConsumed(
						$current,
						"factor",
						lv_factor_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLinearValueProviderAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleExponentialValueProvider
entryRuleExponentialValueProvider returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentialValueProviderRule()); }
	iv_ruleExponentialValueProvider=ruleExponentialValueProvider
	{ $current=$iv_ruleExponentialValueProvider.current; }
	EOF;

// Rule ExponentialValueProvider
ruleExponentialValueProvider returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exponential'
		{
			newLeafNode(otherlv_0, grammarAccess.getExponentialValueProviderAccess().getExponentialKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExponentialValueProviderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_base_2_0=RULE_INT
				{
					newLeafNode(lv_base_2_0, grammarAccess.getExponentialValueProviderAccess().getBaseINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExponentialValueProviderRule());
					}
					setWithLastConsumed(
						$current,
						"base",
						lv_base_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getExponentialValueProviderAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePolynomialValueProvider
entryRulePolynomialValueProvider returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolynomialValueProviderRule()); }
	iv_rulePolynomialValueProvider=rulePolynomialValueProvider
	{ $current=$iv_rulePolynomialValueProvider.current; }
	EOF;

// Rule PolynomialValueProvider
rulePolynomialValueProvider returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='polynomial'
		{
			newLeafNode(otherlv_0, grammarAccess.getPolynomialValueProviderAccess().getPolynomialKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPolynomialValueProviderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_exponent_2_0=RULE_INT
				{
					newLeafNode(lv_exponent_2_0, grammarAccess.getPolynomialValueProviderAccess().getExponentINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolynomialValueProviderRule());
					}
					setWithLastConsumed(
						$current,
						"exponent",
						lv_exponent_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getPolynomialValueProviderAccess().getCommaKeyword_3());
		}
		(
			(
				lv_factor_4_0=RULE_INT
				{
					newLeafNode(lv_factor_4_0, grammarAccess.getPolynomialValueProviderAccess().getFactorINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolynomialValueProviderRule());
					}
					setWithLastConsumed(
						$current,
						"factor",
						lv_factor_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPolynomialValueProviderAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleStopTimeCondition
entryRuleStopTimeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopTimeConditionRule()); }
	iv_ruleStopTimeCondition=ruleStopTimeCondition
	{ $current=$iv_ruleStopTimeCondition.current; }
	EOF;

// Rule StopTimeCondition
ruleStopTimeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stop'
		{
			newLeafNode(otherlv_0, grammarAccess.getStopTimeConditionAccess().getStopKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getStopTimeConditionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_stopTyp_2_0='simulationTime'
				{
					newLeafNode(lv_stopTyp_2_0, grammarAccess.getStopTimeConditionAccess().getStopTypSimulationTimeKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopTimeConditionRule());
					}
					setWithLastConsumed($current, "stopTyp", lv_stopTyp_2_0, "simulationTime");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getStopTimeConditionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				lv_stopParam_4_0=RULE_INT
				{
					newLeafNode(lv_stopParam_4_0, grammarAccess.getStopTimeConditionAccess().getStopParamINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopTimeConditionRule());
					}
					setWithLastConsumed(
						$current,
						"stopParam",
						lv_stopParam_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getStopTimeConditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleStopCountCondition
entryRuleStopCountCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopCountConditionRule()); }
	iv_ruleStopCountCondition=ruleStopCountCondition
	{ $current=$iv_ruleStopCountCondition.current; }
	EOF;

// Rule StopCountCondition
ruleStopCountCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stop'
		{
			newLeafNode(otherlv_0, grammarAccess.getStopCountConditionAccess().getStopKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getStopCountConditionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_stopTyp_2_0='measurementCount'
				{
					newLeafNode(lv_stopTyp_2_0, grammarAccess.getStopCountConditionAccess().getStopTypMeasurementCountKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopCountConditionRule());
					}
					setWithLastConsumed($current, "stopTyp", lv_stopTyp_2_0, "measurementCount");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getStopCountConditionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				lv_stopParam_4_0=RULE_INT
				{
					newLeafNode(lv_stopParam_4_0, grammarAccess.getStopCountConditionAccess().getStopParamINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopCountConditionRule());
					}
					setWithLastConsumed(
						$current,
						"stopParam",
						lv_stopParam_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getStopCountConditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleNumberOfExperiments
entryRuleNumberOfExperiments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberOfExperimentsRule()); }
	iv_ruleNumberOfExperiments=ruleNumberOfExperiments
	{ $current=$iv_ruleNumberOfExperiments.current; }
	EOF;

// Rule NumberOfExperiments
ruleNumberOfExperiments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repetitions'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumberOfExperimentsAccess().getRepetitionsKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getNumberOfExperimentsAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_numberOfRepetitions_2_0=RULE_INT
				{
					newLeafNode(lv_numberOfRepetitions_2_0, grammarAccess.getNumberOfExperimentsAccess().getNumberOfRepetitionsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberOfExperimentsRule());
					}
					setWithLastConsumed(
						$current,
						"numberOfRepetitions",
						lv_numberOfRepetitions_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSeedDefinition
entryRuleSeedDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeedDefinitionRule()); }
	iv_ruleSeedDefinition=ruleSeedDefinition
	{ $current=$iv_ruleSeedDefinition.current; }
	EOF;

// Rule SeedDefinition
ruleSeedDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='seeds'
		{
			newLeafNode(otherlv_0, grammarAccess.getSeedDefinitionAccess().getSeedsKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSeedDefinitionAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSeedDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSeedDefinitionAccess().getSeedListsListOfSeedsParserRuleCall_3_0());
				}
				lv_seedLists_3_0=ruleListOfSeeds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeedDefinitionRule());
					}
					add(
						$current,
						"seedLists",
						lv_seedLists_3_0,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ListOfSeeds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSeedDefinitionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSeedDefinitionAccess().getSeedListsListOfSeedsParserRuleCall_4_1_0());
					}
					lv_seedLists_5_0=ruleListOfSeeds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSeedDefinitionRule());
						}
						add(
							$current,
							"seedLists",
							lv_seedLists_5_0,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ListOfSeeds");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSeedDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleListOfSeeds
entryRuleListOfSeeds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOfSeedsRule()); }
	iv_ruleListOfSeeds=ruleListOfSeeds
	{ $current=$iv_ruleListOfSeeds.current; }
	EOF;

// Rule ListOfSeeds
ruleListOfSeeds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getListOfSeedsAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				lv_seeds_1_0=RULE_INT
				{
					newLeafNode(lv_seeds_1_0, grammarAccess.getListOfSeedsAccess().getSeedsINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListOfSeedsRule());
					}
					addWithLastConsumed(
						$current,
						"seeds",
						lv_seeds_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getListOfSeedsAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_seeds_3_0=RULE_INT
					{
						newLeafNode(lv_seeds_3_0, grammarAccess.getListOfSeedsAccess().getSeedsINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getListOfSeedsRule());
						}
						addWithLastConsumed(
							$current,
							"seeds",
							lv_seeds_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getListOfSeedsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleExperimentDatasource
entryRuleExperimentDatasource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExperimentDatasourceRule()); }
	iv_ruleExperimentDatasource=ruleExperimentDatasource
	{ $current=$iv_ruleExperimentDatasource.current; }
	EOF;

// Rule ExperimentDatasource
ruleExperimentDatasource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datasource'
		{
			newLeafNode(otherlv_0, grammarAccess.getExperimentDatasourceAccess().getDatasourceKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getExperimentDatasourceAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentDatasourceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExperimentDatasourceAccess().getSourceDatasourceCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleToolDefinition
entryRuleToolDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToolDefinitionRule()); }
	iv_ruleToolDefinition=ruleToolDefinition
	{ $current=$iv_ruleToolDefinition.current; }
	EOF;

// Rule ToolDefinition
ruleToolDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='tool'
		{
			newLeafNode(otherlv_0, grammarAccess.getToolDefinitionAccess().getToolKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getToolDefinitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getToolDefinitionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getToolDefinitionAccess().getToolEObjectWithNameCrossReference_2_0());
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getToolDefinitionAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getToolDefinitionAccess().getConfigParamsConfigurationParamsParserRuleCall_3_1_0());
					}
					lv_configParams_4_0=ruleConfigurationParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getToolDefinitionRule());
						}
						add(
							$current,
							"configParams",
							lv_configParams_4_0,
							"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ConfigurationParams");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getToolDefinitionAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleConfigurationParams
entryRuleConfigurationParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationParamsRule()); }
	iv_ruleConfigurationParams=ruleConfigurationParams
	{ $current=$iv_ruleConfigurationParams.current; }
	EOF;

// Rule ConfigurationParams
ruleConfigurationParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_ID
				{
					newLeafNode(lv_key_0_0, grammarAccess.getConfigurationParamsAccess().getKeyIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigurationParamsRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConfigurationParamsAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationParamsAccess().getValueConfigValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleConfigValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationParamsRule());
					}
					set(
						$current,
						"value",
						true,
						"org.palladiosimulator.experimentautomation.dsl.ExpAuto.ConfigValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConfigValue
entryRuleConfigValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConfigValueRule()); }
	iv_ruleConfigValue=ruleConfigValue
	{ $current=$iv_ruleConfigValue.current.getText(); }
	EOF;

// Rule ConfigValue
ruleConfigValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getConfigValueAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getConfigValueAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
