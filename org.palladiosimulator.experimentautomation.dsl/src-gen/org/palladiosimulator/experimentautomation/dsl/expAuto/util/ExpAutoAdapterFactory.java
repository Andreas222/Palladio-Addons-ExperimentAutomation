/**
 * generated by Xtext 2.13.0
 */
package org.palladiosimulator.experimentautomation.dsl.expAuto.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.palladiosimulator.experimentautomation.dsl.expAuto.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ExpAutoPackage
 * @generated
 */
public class ExpAutoAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ExpAutoPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpAutoAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ExpAutoPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpAutoSwitch<Adapter> modelSwitch =
    new ExpAutoSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseDatasource(Datasource object)
      {
        return createDatasourceAdapter();
      }
      @Override
      public Adapter caseExperiment(Experiment object)
      {
        return createExperimentAdapter();
      }
      @Override
      public Adapter caseExperimentSpecifications(ExperimentSpecifications object)
      {
        return createExperimentSpecificationsAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseInitialModel(InitialModel object)
      {
        return createInitialModelAdapter();
      }
      @Override
      public Adapter caseInitSpecifications(InitSpecifications object)
      {
        return createInitSpecificationsAdapter();
      }
      @Override
      public Adapter caseAllocationModel(AllocationModel object)
      {
        return createAllocationModelAdapter();
      }
      @Override
      public Adapter caseUsageModel(UsageModel object)
      {
        return createUsageModelAdapter();
      }
      @Override
      public Adapter caseMiddlewareRepository(MiddlewareRepository object)
      {
        return createMiddlewareRepositoryAdapter();
      }
      @Override
      public Adapter caseEventMiddlewareRepository(EventMiddlewareRepository object)
      {
        return createEventMiddlewareRepositoryAdapter();
      }
      @Override
      public Adapter caseMonitorRepository(MonitorRepository object)
      {
        return createMonitorRepositoryAdapter();
      }
      @Override
      public Adapter caseVariation(Variation object)
      {
        return createVariationAdapter();
      }
      @Override
      public Adapter caseNestedIntervalsValueProvider(NestedIntervalsValueProvider object)
      {
        return createNestedIntervalsValueProviderAdapter();
      }
      @Override
      public Adapter caseSetValueProvider(SetValueProvider object)
      {
        return createSetValueProviderAdapter();
      }
      @Override
      public Adapter caseLinearValueProvider(LinearValueProvider object)
      {
        return createLinearValueProviderAdapter();
      }
      @Override
      public Adapter caseExponentialValueProvider(ExponentialValueProvider object)
      {
        return createExponentialValueProviderAdapter();
      }
      @Override
      public Adapter casePolynomialValueProvider(PolynomialValueProvider object)
      {
        return createPolynomialValueProviderAdapter();
      }
      @Override
      public Adapter caseStopTimeCondition(StopTimeCondition object)
      {
        return createStopTimeConditionAdapter();
      }
      @Override
      public Adapter caseStopCountCondition(StopCountCondition object)
      {
        return createStopCountConditionAdapter();
      }
      @Override
      public Adapter caseNumberOfExperiments(NumberOfExperiments object)
      {
        return createNumberOfExperimentsAdapter();
      }
      @Override
      public Adapter caseSeedDefinition(SeedDefinition object)
      {
        return createSeedDefinitionAdapter();
      }
      @Override
      public Adapter caseListOfSeeds(ListOfSeeds object)
      {
        return createListOfSeedsAdapter();
      }
      @Override
      public Adapter caseExperimentDatasource(ExperimentDatasource object)
      {
        return createExperimentDatasourceAdapter();
      }
      @Override
      public Adapter caseToolDefinition(ToolDefinition object)
      {
        return createToolDefinitionAdapter();
      }
      @Override
      public Adapter caseConfigurationParams(ConfigurationParams object)
      {
        return createConfigurationParamsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Datasource <em>Datasource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Datasource
   * @generated
   */
  public Adapter createDatasourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Experiment <em>Experiment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Experiment
   * @generated
   */
  public Adapter createExperimentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ExperimentSpecifications <em>Experiment Specifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ExperimentSpecifications
   * @generated
   */
  public Adapter createExperimentSpecificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.InitialModel <em>Initial Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.InitialModel
   * @generated
   */
  public Adapter createInitialModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.InitSpecifications <em>Init Specifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.InitSpecifications
   * @generated
   */
  public Adapter createInitSpecificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.AllocationModel <em>Allocation Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.AllocationModel
   * @generated
   */
  public Adapter createAllocationModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.UsageModel <em>Usage Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.UsageModel
   * @generated
   */
  public Adapter createUsageModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.MiddlewareRepository <em>Middleware Repository</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.MiddlewareRepository
   * @generated
   */
  public Adapter createMiddlewareRepositoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.EventMiddlewareRepository <em>Event Middleware Repository</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.EventMiddlewareRepository
   * @generated
   */
  public Adapter createEventMiddlewareRepositoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.MonitorRepository <em>Monitor Repository</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.MonitorRepository
   * @generated
   */
  public Adapter createMonitorRepositoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.Variation <em>Variation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.Variation
   * @generated
   */
  public Adapter createVariationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.NestedIntervalsValueProvider <em>Nested Intervals Value Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.NestedIntervalsValueProvider
   * @generated
   */
  public Adapter createNestedIntervalsValueProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.SetValueProvider <em>Set Value Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.SetValueProvider
   * @generated
   */
  public Adapter createSetValueProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.LinearValueProvider <em>Linear Value Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.LinearValueProvider
   * @generated
   */
  public Adapter createLinearValueProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ExponentialValueProvider <em>Exponential Value Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ExponentialValueProvider
   * @generated
   */
  public Adapter createExponentialValueProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.PolynomialValueProvider <em>Polynomial Value Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.PolynomialValueProvider
   * @generated
   */
  public Adapter createPolynomialValueProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.StopTimeCondition <em>Stop Time Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.StopTimeCondition
   * @generated
   */
  public Adapter createStopTimeConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.StopCountCondition <em>Stop Count Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.StopCountCondition
   * @generated
   */
  public Adapter createStopCountConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.NumberOfExperiments <em>Number Of Experiments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.NumberOfExperiments
   * @generated
   */
  public Adapter createNumberOfExperimentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.SeedDefinition <em>Seed Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.SeedDefinition
   * @generated
   */
  public Adapter createSeedDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ListOfSeeds <em>List Of Seeds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ListOfSeeds
   * @generated
   */
  public Adapter createListOfSeedsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ExperimentDatasource <em>Experiment Datasource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ExperimentDatasource
   * @generated
   */
  public Adapter createExperimentDatasourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ToolDefinition <em>Tool Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ToolDefinition
   * @generated
   */
  public Adapter createToolDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.experimentautomation.dsl.expAuto.ConfigurationParams <em>Configuration Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.experimentautomation.dsl.expAuto.ConfigurationParams
   * @generated
   */
  public Adapter createConfigurationParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ExpAutoAdapterFactory
