/**
 * generated by Xtext 2.12.0
 */
package org.palladiosimulator.experimentautomation.dsl.expAuto.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.palladiosimulator.experimentautomation.dsl.expAuto.ConfigurationParams;
import org.palladiosimulator.experimentautomation.dsl.expAuto.ExpAutoPackage;
import org.palladiosimulator.experimentautomation.dsl.expAuto.ToolDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tool Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.experimentautomation.dsl.expAuto.impl.ToolDefinitionImpl#getTool <em>Tool</em>}</li>
 *   <li>{@link org.palladiosimulator.experimentautomation.dsl.expAuto.impl.ToolDefinitionImpl#getConfigParams <em>Config Params</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ToolDefinitionImpl extends MinimalEObjectImpl.Container implements ToolDefinition
{
  /**
   * The default value of the '{@link #getTool() <em>Tool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTool()
   * @generated
   * @ordered
   */
  protected static final String TOOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTool() <em>Tool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTool()
   * @generated
   * @ordered
   */
  protected String tool = TOOL_EDEFAULT;

  /**
   * The cached value of the '{@link #getConfigParams() <em>Config Params</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigParams()
   * @generated
   * @ordered
   */
  protected ConfigurationParams configParams;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ToolDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExpAutoPackage.Literals.TOOL_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTool()
  {
    return tool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTool(String newTool)
  {
    String oldTool = tool;
    tool = newTool;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpAutoPackage.TOOL_DEFINITION__TOOL, oldTool, tool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConfigurationParams getConfigParams()
  {
    return configParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfigParams(ConfigurationParams newConfigParams, NotificationChain msgs)
  {
    ConfigurationParams oldConfigParams = configParams;
    configParams = newConfigParams;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS, oldConfigParams, newConfigParams);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConfigParams(ConfigurationParams newConfigParams)
  {
    if (newConfigParams != configParams)
    {
      NotificationChain msgs = null;
      if (configParams != null)
        msgs = ((InternalEObject)configParams).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS, null, msgs);
      if (newConfigParams != null)
        msgs = ((InternalEObject)newConfigParams).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS, null, msgs);
      msgs = basicSetConfigParams(newConfigParams, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS, newConfigParams, newConfigParams));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS:
        return basicSetConfigParams(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExpAutoPackage.TOOL_DEFINITION__TOOL:
        return getTool();
      case ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS:
        return getConfigParams();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExpAutoPackage.TOOL_DEFINITION__TOOL:
        setTool((String)newValue);
        return;
      case ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS:
        setConfigParams((ConfigurationParams)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExpAutoPackage.TOOL_DEFINITION__TOOL:
        setTool(TOOL_EDEFAULT);
        return;
      case ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS:
        setConfigParams((ConfigurationParams)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExpAutoPackage.TOOL_DEFINITION__TOOL:
        return TOOL_EDEFAULT == null ? tool != null : !TOOL_EDEFAULT.equals(tool);
      case ExpAutoPackage.TOOL_DEFINITION__CONFIG_PARAMS:
        return configParams != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (tool: ");
    result.append(tool);
    result.append(')');
    return result.toString();
  }

} //ToolDefinitionImpl
