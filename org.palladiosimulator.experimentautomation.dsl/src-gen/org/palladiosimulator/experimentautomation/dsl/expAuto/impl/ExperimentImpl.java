/**
 * generated by Xtext 2.12.0
 */
package org.palladiosimulator.experimentautomation.dsl.expAuto.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.palladiosimulator.experimentautomation.dsl.expAuto.ExpAutoPackage;
import org.palladiosimulator.experimentautomation.dsl.expAuto.Experiment;
import org.palladiosimulator.experimentautomation.dsl.expAuto.ExperimentSpecifications;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Experiment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.experimentautomation.dsl.expAuto.impl.ExperimentImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.palladiosimulator.experimentautomation.dsl.expAuto.impl.ExperimentImpl#getDesign <em>Design</em>}</li>
 *   <li>{@link org.palladiosimulator.experimentautomation.dsl.expAuto.impl.ExperimentImpl#getExperimentSpecifications <em>Experiment Specifications</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExperimentImpl extends MinimalEObjectImpl.Container implements Experiment
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDesign() <em>Design</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesign()
   * @generated
   * @ordered
   */
  protected static final String DESIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDesign() <em>Design</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesign()
   * @generated
   * @ordered
   */
  protected String design = DESIGN_EDEFAULT;

  /**
   * The cached value of the '{@link #getExperimentSpecifications() <em>Experiment Specifications</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperimentSpecifications()
   * @generated
   * @ordered
   */
  protected ExperimentSpecifications experimentSpecifications;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExperimentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExpAutoPackage.Literals.EXPERIMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpAutoPackage.EXPERIMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDesign()
  {
    return design;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDesign(String newDesign)
  {
    String oldDesign = design;
    design = newDesign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpAutoPackage.EXPERIMENT__DESIGN, oldDesign, design));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExperimentSpecifications getExperimentSpecifications()
  {
    return experimentSpecifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExperimentSpecifications(ExperimentSpecifications newExperimentSpecifications, NotificationChain msgs)
  {
    ExperimentSpecifications oldExperimentSpecifications = experimentSpecifications;
    experimentSpecifications = newExperimentSpecifications;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS, oldExperimentSpecifications, newExperimentSpecifications);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExperimentSpecifications(ExperimentSpecifications newExperimentSpecifications)
  {
    if (newExperimentSpecifications != experimentSpecifications)
    {
      NotificationChain msgs = null;
      if (experimentSpecifications != null)
        msgs = ((InternalEObject)experimentSpecifications).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS, null, msgs);
      if (newExperimentSpecifications != null)
        msgs = ((InternalEObject)newExperimentSpecifications).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS, null, msgs);
      msgs = basicSetExperimentSpecifications(newExperimentSpecifications, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS, newExperimentSpecifications, newExperimentSpecifications));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS:
        return basicSetExperimentSpecifications(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExpAutoPackage.EXPERIMENT__NAME:
        return getName();
      case ExpAutoPackage.EXPERIMENT__DESIGN:
        return getDesign();
      case ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS:
        return getExperimentSpecifications();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExpAutoPackage.EXPERIMENT__NAME:
        setName((String)newValue);
        return;
      case ExpAutoPackage.EXPERIMENT__DESIGN:
        setDesign((String)newValue);
        return;
      case ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS:
        setExperimentSpecifications((ExperimentSpecifications)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExpAutoPackage.EXPERIMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ExpAutoPackage.EXPERIMENT__DESIGN:
        setDesign(DESIGN_EDEFAULT);
        return;
      case ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS:
        setExperimentSpecifications((ExperimentSpecifications)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExpAutoPackage.EXPERIMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ExpAutoPackage.EXPERIMENT__DESIGN:
        return DESIGN_EDEFAULT == null ? design != null : !DESIGN_EDEFAULT.equals(design);
      case ExpAutoPackage.EXPERIMENT__EXPERIMENT_SPECIFICATIONS:
        return experimentSpecifications != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", design: ");
    result.append(design);
    result.append(')');
    return result.toString();
  }

} //ExperimentImpl
