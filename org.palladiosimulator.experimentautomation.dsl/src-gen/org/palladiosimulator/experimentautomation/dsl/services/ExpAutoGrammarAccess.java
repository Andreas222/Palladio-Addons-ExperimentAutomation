/*
 * generated by Xtext 2.12.0
 */
package org.palladiosimulator.experimentautomation.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpAutoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDatasourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDatasourcesDatasourceParserRuleCall_1_0 = (RuleCall)cDatasourcesAssignment_1.eContents().get(0);
		private final Assignment cExperimentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExperimentsExperimentParserRuleCall_2_0 = (RuleCall)cExperimentsAssignment_2.eContents().get(0);
		
		//Model:
		//	imports+=Import+
		//	datasources+=Datasource+
		//	experiments+=Experiment+;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import+ datasources+=Datasource+ experiments+=Experiment+
		public Group getGroup() { return cGroup; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//datasources+=Datasource+
		public Assignment getDatasourcesAssignment_1() { return cDatasourcesAssignment_1; }
		
		//Datasource
		public RuleCall getDatasourcesDatasourceParserRuleCall_1_0() { return cDatasourcesDatasourceParserRuleCall_1_0; }
		
		//experiments+=Experiment+
		public Assignment getExperimentsAssignment_2() { return cExperimentsAssignment_2; }
		
		//Experiment
		public RuleCall getExperimentsExperimentParserRuleCall_2_0() { return cExperimentsExperimentParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' path=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}
	public class DatasourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Datasource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationDatasourceSpecificationParserRuleCall_3_0 = (RuleCall)cSpecificationAssignment_3.eContents().get(0);
		
		//Datasource:
		//	'datasource' name=ID ':' specification=DatasourceSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//'datasource' name=ID ':' specification=DatasourceSpecification
		public Group getGroup() { return cGroup; }
		
		//'datasource'
		public Keyword getDatasourceKeyword_0() { return cDatasourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//specification=DatasourceSpecification
		public Assignment getSpecificationAssignment_3() { return cSpecificationAssignment_3; }
		
		//DatasourceSpecification
		public RuleCall getSpecificationDatasourceSpecificationParserRuleCall_3_0() { return cSpecificationDatasourceSpecificationParserRuleCall_3_0; }
	}
	public class DatasourceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.DatasourceSpecification");
		private final Assignment cSpecificationAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSpecificationAlternatives_0 = (Alternatives)cSpecificationAssignment.eContents().get(0);
		private final RuleCall cSpecificationFileDatasourceSpecificationParserRuleCall_0_0 = (RuleCall)cSpecificationAlternatives_0.eContents().get(0);
		private final RuleCall cSpecificationMemoryDatasourceSpecificationParserRuleCall_0_1 = (RuleCall)cSpecificationAlternatives_0.eContents().get(1);
		
		//DatasourceSpecification:
		//	specification=(FileDatasourceSpecification | MemoryDatasourceSpecification);
		@Override public ParserRule getRule() { return rule; }
		
		//specification=(FileDatasourceSpecification | MemoryDatasourceSpecification)
		public Assignment getSpecificationAssignment() { return cSpecificationAssignment; }
		
		//(FileDatasourceSpecification | MemoryDatasourceSpecification)
		public Alternatives getSpecificationAlternatives_0() { return cSpecificationAlternatives_0; }
		
		//FileDatasourceSpecification
		public RuleCall getSpecificationFileDatasourceSpecificationParserRuleCall_0_0() { return cSpecificationFileDatasourceSpecificationParserRuleCall_0_0; }
		
		//MemoryDatasourceSpecification
		public RuleCall getSpecificationMemoryDatasourceSpecificationParserRuleCall_0_1() { return cSpecificationMemoryDatasourceSpecificationParserRuleCall_0_1; }
	}
	public class FileDatasourceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.FileDatasourceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSourceTypeEDP2Keyword_0_0 = (Keyword)cSourceTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceURISTRINGTerminalRuleCall_2_0 = (RuleCall)cSourceURIAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FileDatasourceSpecification:
		//	sourceType='EDP2' '(' sourceURI=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//sourceType='EDP2' '(' sourceURI=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//sourceType='EDP2'
		public Assignment getSourceTypeAssignment_0() { return cSourceTypeAssignment_0; }
		
		//'EDP2'
		public Keyword getSourceTypeEDP2Keyword_0_0() { return cSourceTypeEDP2Keyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//sourceURI=STRING
		public Assignment getSourceURIAssignment_2() { return cSourceURIAssignment_2; }
		
		//STRING
		public RuleCall getSourceURISTRINGTerminalRuleCall_2_0() { return cSourceURISTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MemoryDatasourceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.MemoryDatasourceSpecification");
		private final Assignment cSourceTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSourceTypeEDP2Keyword_0 = (Keyword)cSourceTypeAssignment.eContents().get(0);
		
		//MemoryDatasourceSpecification:
		//	sourceType='EDP2';
		@Override public ParserRule getRule() { return rule; }
		
		//sourceType='EDP2'
		public Assignment getSourceTypeAssignment() { return cSourceTypeAssignment; }
		
		//'EDP2'
		public Keyword getSourceTypeEDP2Keyword_0() { return cSourceTypeEDP2Keyword_0; }
	}
	public class ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDesignAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cDesignAlternatives_3_0 = (Alternatives)cDesignAssignment_3.eContents().get(0);
		private final Keyword cDesignFullFactorialKeyword_3_0_0 = (Keyword)cDesignAlternatives_3_0.eContents().get(0);
		private final Keyword cDesignOneFactorKeyword_3_0_1 = (Keyword)cDesignAlternatives_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExperimentSpecificationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExperimentSpecificationsExperimentSpecificationsParserRuleCall_5_0 = (RuleCall)cExperimentSpecificationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Experiment:
		//	'experiment' name=ID ':' design=('FullFactorial' | 'OneFactor')
		//	'{'
		//	experimentSpecifications=ExperimentSpecifications
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'experiment' name=ID ':' design=('FullFactorial' | 'OneFactor') '{' experimentSpecifications=ExperimentSpecifications
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'experiment'
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//design=('FullFactorial' | 'OneFactor')
		public Assignment getDesignAssignment_3() { return cDesignAssignment_3; }
		
		//('FullFactorial' | 'OneFactor')
		public Alternatives getDesignAlternatives_3_0() { return cDesignAlternatives_3_0; }
		
		//'FullFactorial'
		public Keyword getDesignFullFactorialKeyword_3_0_0() { return cDesignFullFactorialKeyword_3_0_0; }
		
		//'OneFactor'
		public Keyword getDesignOneFactorKeyword_3_0_1() { return cDesignOneFactorKeyword_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//experimentSpecifications=ExperimentSpecifications
		public Assignment getExperimentSpecificationsAssignment_5() { return cExperimentSpecificationsAssignment_5; }
		
		//ExperimentSpecifications
		public RuleCall getExperimentSpecificationsExperimentSpecificationsParserRuleCall_5_0() { return cExperimentSpecificationsExperimentSpecificationsParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExperimentSpecificationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExperimentSpecifications");
		private final Assignment cSpecificationsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSpecificationsAlternatives_0 = (Alternatives)cSpecificationsAssignment.eContents().get(0);
		private final RuleCall cSpecificationsDescriptionParserRuleCall_0_0 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(0);
		private final RuleCall cSpecificationsInitialModelParserRuleCall_0_1 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(1);
		private final RuleCall cSpecificationsVariationParserRuleCall_0_2 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(2);
		private final RuleCall cSpecificationsStopTimeConditionParserRuleCall_0_3 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(3);
		private final RuleCall cSpecificationsStopCountConditionParserRuleCall_0_4 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(4);
		private final RuleCall cSpecificationsNumberOfExperimentsParserRuleCall_0_5 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(5);
		private final RuleCall cSpecificationsToolDefinitionParserRuleCall_0_6 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(6);
		private final RuleCall cSpecificationsSeedDefinitionParserRuleCall_0_7 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(7);
		private final RuleCall cSpecificationsExperimentDatasourceParserRuleCall_0_8 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(8);
		
		//ExperimentSpecifications:
		//	specifications+=(Description | InitialModel | Variation | StopTimeCondition | StopCountCondition |
		//	NumberOfExperiments | ToolDefinition | SeedDefinition | ExperimentDatasource)+;
		@Override public ParserRule getRule() { return rule; }
		
		//specifications+=(Description | InitialModel | Variation | StopTimeCondition | StopCountCondition | NumberOfExperiments |
		//ToolDefinition | SeedDefinition | ExperimentDatasource)+
		public Assignment getSpecificationsAssignment() { return cSpecificationsAssignment; }
		
		//(Description | InitialModel | Variation | StopTimeCondition | StopCountCondition | NumberOfExperiments | ToolDefinition
		//| SeedDefinition | ExperimentDatasource)
		public Alternatives getSpecificationsAlternatives_0() { return cSpecificationsAlternatives_0; }
		
		//Description
		public RuleCall getSpecificationsDescriptionParserRuleCall_0_0() { return cSpecificationsDescriptionParserRuleCall_0_0; }
		
		//InitialModel
		public RuleCall getSpecificationsInitialModelParserRuleCall_0_1() { return cSpecificationsInitialModelParserRuleCall_0_1; }
		
		//Variation
		public RuleCall getSpecificationsVariationParserRuleCall_0_2() { return cSpecificationsVariationParserRuleCall_0_2; }
		
		//StopTimeCondition
		public RuleCall getSpecificationsStopTimeConditionParserRuleCall_0_3() { return cSpecificationsStopTimeConditionParserRuleCall_0_3; }
		
		//StopCountCondition
		public RuleCall getSpecificationsStopCountConditionParserRuleCall_0_4() { return cSpecificationsStopCountConditionParserRuleCall_0_4; }
		
		//NumberOfExperiments
		public RuleCall getSpecificationsNumberOfExperimentsParserRuleCall_0_5() { return cSpecificationsNumberOfExperimentsParserRuleCall_0_5; }
		
		//ToolDefinition
		public RuleCall getSpecificationsToolDefinitionParserRuleCall_0_6() { return cSpecificationsToolDefinitionParserRuleCall_0_6; }
		
		//SeedDefinition
		public RuleCall getSpecificationsSeedDefinitionParserRuleCall_0_7() { return cSpecificationsSeedDefinitionParserRuleCall_0_7; }
		
		//ExperimentDatasource
		public RuleCall getSpecificationsExperimentDatasourceParserRuleCall_0_8() { return cSpecificationsExperimentDatasourceParserRuleCall_0_8; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Description:
		//	'description' '=' description=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'description' '=' description=STRING
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class InitialModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.InitialModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeltypAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cModeltypPCMKeyword_2_0 = (Keyword)cModeltypAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitSpecificationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitSpecificationsInitSpecificationsParserRuleCall_4_0 = (RuleCall)cInitSpecificationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InitialModel:
		//	'initial' '=' modeltyp='PCM'
		//	'{'
		//	initSpecifications=InitSpecifications
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'initial' '=' modeltyp='PCM' '{' initSpecifications=InitSpecifications '}'
		public Group getGroup() { return cGroup; }
		
		//'initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//modeltyp='PCM'
		public Assignment getModeltypAssignment_2() { return cModeltypAssignment_2; }
		
		//'PCM'
		public Keyword getModeltypPCMKeyword_2_0() { return cModeltypPCMKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//initSpecifications=InitSpecifications
		public Assignment getInitSpecificationsAssignment_4() { return cInitSpecificationsAssignment_4; }
		
		//InitSpecifications
		public RuleCall getInitSpecificationsInitSpecificationsParserRuleCall_4_0() { return cInitSpecificationsInitSpecificationsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InitSpecificationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.InitSpecifications");
		private final Assignment cSpecificationsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSpecificationsAlternatives_0 = (Alternatives)cSpecificationsAssignment.eContents().get(0);
		private final RuleCall cSpecificationsAllocationModelParserRuleCall_0_0 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(0);
		private final RuleCall cSpecificationsUsageModelParserRuleCall_0_1 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(1);
		private final RuleCall cSpecificationsMiddlewareRepositoryParserRuleCall_0_2 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(2);
		private final RuleCall cSpecificationsEventMiddlewareRepositoryParserRuleCall_0_3 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(3);
		private final RuleCall cSpecificationsMonitorRepositoryParserRuleCall_0_4 = (RuleCall)cSpecificationsAlternatives_0.eContents().get(4);
		
		//InitSpecifications:
		//	specifications+=(AllocationModel | UsageModel | MiddlewareRepository | EventMiddlewareRepository |
		//	MonitorRepository)+;
		@Override public ParserRule getRule() { return rule; }
		
		//specifications+=(AllocationModel | UsageModel | MiddlewareRepository | EventMiddlewareRepository | MonitorRepository)+
		public Assignment getSpecificationsAssignment() { return cSpecificationsAssignment; }
		
		//(AllocationModel | UsageModel | MiddlewareRepository | EventMiddlewareRepository | MonitorRepository)
		public Alternatives getSpecificationsAlternatives_0() { return cSpecificationsAlternatives_0; }
		
		//AllocationModel
		public RuleCall getSpecificationsAllocationModelParserRuleCall_0_0() { return cSpecificationsAllocationModelParserRuleCall_0_0; }
		
		//UsageModel
		public RuleCall getSpecificationsUsageModelParserRuleCall_0_1() { return cSpecificationsUsageModelParserRuleCall_0_1; }
		
		//MiddlewareRepository
		public RuleCall getSpecificationsMiddlewareRepositoryParserRuleCall_0_2() { return cSpecificationsMiddlewareRepositoryParserRuleCall_0_2; }
		
		//EventMiddlewareRepository
		public RuleCall getSpecificationsEventMiddlewareRepositoryParserRuleCall_0_3() { return cSpecificationsEventMiddlewareRepositoryParserRuleCall_0_3; }
		
		//MonitorRepository
		public RuleCall getSpecificationsMonitorRepositoryParserRuleCall_0_4() { return cSpecificationsMonitorRepositoryParserRuleCall_0_4; }
	}
	public class AllocationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.AllocationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAllocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAllocationSTRINGTerminalRuleCall_2_0 = (RuleCall)cAllocationAssignment_2.eContents().get(0);
		
		//AllocationModel:
		//	'allocation' '=' allocation=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'allocation' '=' allocation=STRING
		public Group getGroup() { return cGroup; }
		
		//'allocation'
		public Keyword getAllocationKeyword_0() { return cAllocationKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//allocation=STRING
		public Assignment getAllocationAssignment_2() { return cAllocationAssignment_2; }
		
		//STRING
		public RuleCall getAllocationSTRINGTerminalRuleCall_2_0() { return cAllocationSTRINGTerminalRuleCall_2_0; }
	}
	public class UsageModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.UsageModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsageModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsageModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsageModelSTRINGTerminalRuleCall_2_0 = (RuleCall)cUsageModelAssignment_2.eContents().get(0);
		
		//UsageModel:
		//	'usageModel' '=' usageModel=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'usageModel' '=' usageModel=STRING
		public Group getGroup() { return cGroup; }
		
		//'usageModel'
		public Keyword getUsageModelKeyword_0() { return cUsageModelKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//usageModel=STRING
		public Assignment getUsageModelAssignment_2() { return cUsageModelAssignment_2; }
		
		//STRING
		public RuleCall getUsageModelSTRINGTerminalRuleCall_2_0() { return cUsageModelSTRINGTerminalRuleCall_2_0; }
	}
	public class MiddlewareRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.MiddlewareRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMiddlewareRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMiddlewareRepositoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMiddlewareRepositorySTRINGTerminalRuleCall_2_0 = (RuleCall)cMiddlewareRepositoryAssignment_2.eContents().get(0);
		
		//MiddlewareRepository:
		//	'middlewareRepository' '=' middlewareRepository=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'middlewareRepository' '=' middlewareRepository=STRING
		public Group getGroup() { return cGroup; }
		
		//'middlewareRepository'
		public Keyword getMiddlewareRepositoryKeyword_0() { return cMiddlewareRepositoryKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//middlewareRepository=STRING
		public Assignment getMiddlewareRepositoryAssignment_2() { return cMiddlewareRepositoryAssignment_2; }
		
		//STRING
		public RuleCall getMiddlewareRepositorySTRINGTerminalRuleCall_2_0() { return cMiddlewareRepositorySTRINGTerminalRuleCall_2_0; }
	}
	public class EventMiddlewareRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.EventMiddlewareRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventMiddlewareRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventMiddelwareRepositoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventMiddelwareRepositorySTRINGTerminalRuleCall_2_0 = (RuleCall)cEventMiddelwareRepositoryAssignment_2.eContents().get(0);
		
		//EventMiddlewareRepository:
		//	'eventMiddlewareRepository' '=' eventMiddelwareRepository=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'eventMiddlewareRepository' '=' eventMiddelwareRepository=STRING
		public Group getGroup() { return cGroup; }
		
		//'eventMiddlewareRepository'
		public Keyword getEventMiddlewareRepositoryKeyword_0() { return cEventMiddlewareRepositoryKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//eventMiddelwareRepository=STRING
		public Assignment getEventMiddelwareRepositoryAssignment_2() { return cEventMiddelwareRepositoryAssignment_2; }
		
		//STRING
		public RuleCall getEventMiddelwareRepositorySTRINGTerminalRuleCall_2_0() { return cEventMiddelwareRepositorySTRINGTerminalRuleCall_2_0; }
	}
	public class MonitorRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.MonitorRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonitorRepositoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonitorRepositorySTRINGTerminalRuleCall_2_0 = (RuleCall)cMonitorRepositoryAssignment_2.eContents().get(0);
		
		//MonitorRepository:
		//	'monitorRepository' '=' monitorRepository=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'monitorRepository' '=' monitorRepository=STRING
		public Group getGroup() { return cGroup; }
		
		//'monitorRepository'
		public Keyword getMonitorRepositoryKeyword_0() { return cMonitorRepositoryKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//monitorRepository=STRING
		public Assignment getMonitorRepositoryAssignment_2() { return cMonitorRepositoryAssignment_2; }
		
		//STRING
		public RuleCall getMonitorRepositorySTRINGTerminalRuleCall_2_0() { return cMonitorRepositorySTRINGTerminalRuleCall_2_0; }
	}
	public class VariationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.Variation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariationTypAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariationTypValueVariationCrossReference_2_0 = (CrossReference)cVariationTypAssignment_2.eContents().get(0);
		private final RuleCall cVariationTypValueVariationIDTerminalRuleCall_2_0_1 = (RuleCall)cVariationTypValueVariationCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetIdentifierCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetIdentifierIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetIdentifierCrossReference_7_0.eContents().get(1);
		private final Keyword cMaxVariationsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMaxVariationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMaxVariationsINTTerminalRuleCall_10_0 = (RuleCall)cMaxVariationsAssignment_10.eContents().get(0);
		private final Keyword cValuesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cValueProviderAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final Alternatives cValueProviderAlternatives_13_0 = (Alternatives)cValueProviderAssignment_13.eContents().get(0);
		private final RuleCall cValueProviderNestedIntervalsValueProviderParserRuleCall_13_0_0 = (RuleCall)cValueProviderAlternatives_13_0.eContents().get(0);
		private final RuleCall cValueProviderSetValueProviderParserRuleCall_13_0_1 = (RuleCall)cValueProviderAlternatives_13_0.eContents().get(1);
		private final RuleCall cValueProviderLinearValueProviderParserRuleCall_13_0_2 = (RuleCall)cValueProviderAlternatives_13_0.eContents().get(2);
		private final RuleCall cValueProviderExponentialValueProviderParserRuleCall_13_0_3 = (RuleCall)cValueProviderAlternatives_13_0.eContents().get(3);
		private final RuleCall cValueProviderPolynomialValueProviderParserRuleCall_13_0_4 = (RuleCall)cValueProviderAlternatives_13_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Variation:
		//	'variation' '=' variationTyp=[ValueVariation] name=ID
		//	'{'
		//	'target' '=' target=[Identifier]
		//	'maxVariations' '=' maxVariations=INT
		//	'values' '=' valueProvider=(NestedIntervalsValueProvider | SetValueProvider | LinearValueProvider |
		//	ExponentialValueProvider | PolynomialValueProvider)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'variation' '=' variationTyp=[ValueVariation] name=ID '{' 'target' '=' target=[Identifier] 'maxVariations' '='
		//maxVariations=INT 'values' '=' valueProvider=(NestedIntervalsValueProvider | SetValueProvider | LinearValueProvider |
		//ExponentialValueProvider | PolynomialValueProvider) '}'
		public Group getGroup() { return cGroup; }
		
		//'variation'
		public Keyword getVariationKeyword_0() { return cVariationKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//variationTyp=[ValueVariation]
		public Assignment getVariationTypAssignment_2() { return cVariationTypAssignment_2; }
		
		//[ValueVariation]
		public CrossReference getVariationTypValueVariationCrossReference_2_0() { return cVariationTypValueVariationCrossReference_2_0; }
		
		//ID
		public RuleCall getVariationTypValueVariationIDTerminalRuleCall_2_0_1() { return cVariationTypValueVariationIDTerminalRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'target'
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//target=[Identifier]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[Identifier]
		public CrossReference getTargetIdentifierCrossReference_7_0() { return cTargetIdentifierCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetIdentifierIDTerminalRuleCall_7_0_1() { return cTargetIdentifierIDTerminalRuleCall_7_0_1; }
		
		//'maxVariations'
		public Keyword getMaxVariationsKeyword_8() { return cMaxVariationsKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//maxVariations=INT
		public Assignment getMaxVariationsAssignment_10() { return cMaxVariationsAssignment_10; }
		
		//INT
		public RuleCall getMaxVariationsINTTerminalRuleCall_10_0() { return cMaxVariationsINTTerminalRuleCall_10_0; }
		
		//'values'
		public Keyword getValuesKeyword_11() { return cValuesKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//valueProvider=(NestedIntervalsValueProvider | SetValueProvider | LinearValueProvider | ExponentialValueProvider |
		//PolynomialValueProvider)
		public Assignment getValueProviderAssignment_13() { return cValueProviderAssignment_13; }
		
		//(NestedIntervalsValueProvider | SetValueProvider | LinearValueProvider | ExponentialValueProvider |
		//PolynomialValueProvider)
		public Alternatives getValueProviderAlternatives_13_0() { return cValueProviderAlternatives_13_0; }
		
		//NestedIntervalsValueProvider
		public RuleCall getValueProviderNestedIntervalsValueProviderParserRuleCall_13_0_0() { return cValueProviderNestedIntervalsValueProviderParserRuleCall_13_0_0; }
		
		//SetValueProvider
		public RuleCall getValueProviderSetValueProviderParserRuleCall_13_0_1() { return cValueProviderSetValueProviderParserRuleCall_13_0_1; }
		
		//LinearValueProvider
		public RuleCall getValueProviderLinearValueProviderParserRuleCall_13_0_2() { return cValueProviderLinearValueProviderParserRuleCall_13_0_2; }
		
		//ExponentialValueProvider
		public RuleCall getValueProviderExponentialValueProviderParserRuleCall_13_0_3() { return cValueProviderExponentialValueProviderParserRuleCall_13_0_3; }
		
		//PolynomialValueProvider
		public RuleCall getValueProviderPolynomialValueProviderParserRuleCall_13_0_4() { return cValueProviderPolynomialValueProviderParserRuleCall_13_0_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class NestedIntervalsValueProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.NestedIntervalsValueProvider");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMinAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMinINTTerminalRuleCall_0_1_0 = (RuleCall)cMinAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMaxAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_0_3_0 = (RuleCall)cMaxAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNestedIntervallKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMinAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_1_2_0 = (RuleCall)cMinAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cMaxAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cMaxINTTerminalRuleCall_1_4_0 = (RuleCall)cMaxAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//NestedIntervalsValueProvider:
		//	'[' min=INT ',' max=INT ']' | 'nestedIntervall' '(' min=INT ',' max=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' min=INT ',' max=INT ']' | 'nestedIntervall' '(' min=INT ',' max=INT ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' min=INT ',' max=INT ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//min=INT
		public Assignment getMinAssignment_0_1() { return cMinAssignment_0_1; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_0_1_0() { return cMinINTTerminalRuleCall_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//max=INT
		public Assignment getMaxAssignment_0_3() { return cMaxAssignment_0_3; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_0_3_0() { return cMaxINTTerminalRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//'nestedIntervall' '(' min=INT ',' max=INT ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'nestedIntervall'
		public Keyword getNestedIntervallKeyword_1_0() { return cNestedIntervallKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//min=INT
		public Assignment getMinAssignment_1_2() { return cMinAssignment_1_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_1_2_0() { return cMinINTTerminalRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//max=INT
		public Assignment getMaxAssignment_1_4() { return cMaxAssignment_1_4; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_1_4_0() { return cMaxINTTerminalRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class SetValueProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.SetValueProvider");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValuesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValuesINTTerminalRuleCall_0_1_0 = (RuleCall)cValuesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cValuesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cValuesINTTerminalRuleCall_0_2_1_0 = (RuleCall)cValuesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSetValuesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValuesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValuesINTTerminalRuleCall_1_2_0 = (RuleCall)cValuesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cValuesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cValuesINTTerminalRuleCall_1_3_1_0 = (RuleCall)cValuesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//SetValueProvider:
		//	'{' values+=INT (',' values+=INT)* '}' | 'setValues' '(' values+=INT (',' values+=INT)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' values+=INT (',' values+=INT)* '}' | 'setValues' '(' values+=INT (',' values+=INT)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' values+=INT (',' values+=INT)* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_0_1() { return cValuesAssignment_0_1; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_0_1_0() { return cValuesINTTerminalRuleCall_0_1_0; }
		
		//(',' values+=INT)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_0_2_1() { return cValuesAssignment_0_2_1; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_0_2_1_0() { return cValuesINTTerminalRuleCall_0_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//'setValues' '(' values+=INT (',' values+=INT)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'setValues'
		public Keyword getSetValuesKeyword_1_0() { return cSetValuesKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//values+=INT
		public Assignment getValuesAssignment_1_2() { return cValuesAssignment_1_2; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_1_2_0() { return cValuesINTTerminalRuleCall_1_2_0; }
		
		//(',' values+=INT)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_1_3_1() { return cValuesAssignment_1_3_1; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_1_3_1_0() { return cValuesINTTerminalRuleCall_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class LinearValueProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.LinearValueProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSummandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSummandINTTerminalRuleCall_2_0 = (RuleCall)cSummandAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorINTTerminalRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LinearValueProvider:
		//	'linear' '(' summand=INT ',' factor=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'linear' '(' summand=INT ',' factor=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'linear'
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//summand=INT
		public Assignment getSummandAssignment_2() { return cSummandAssignment_2; }
		
		//INT
		public RuleCall getSummandINTTerminalRuleCall_2_0() { return cSummandINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//factor=INT
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }
		
		//INT
		public RuleCall getFactorINTTerminalRuleCall_4_0() { return cFactorINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExponentialValueProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExponentialValueProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExponentialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseINTTerminalRuleCall_2_0 = (RuleCall)cBaseAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExponentialValueProvider:
		//	'exponential' '(' base=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'exponential' '(' base=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'exponential'
		public Keyword getExponentialKeyword_0() { return cExponentialKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//base=INT
		public Assignment getBaseAssignment_2() { return cBaseAssignment_2; }
		
		//INT
		public RuleCall getBaseINTTerminalRuleCall_2_0() { return cBaseINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PolynomialValueProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.PolynomialValueProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolynomialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExponentINTTerminalRuleCall_2_0 = (RuleCall)cExponentAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorINTTerminalRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PolynomialValueProvider:
		//	'polynomial' '(' exponent=INT ',' factor=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'polynomial' '(' exponent=INT ',' factor=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'polynomial'
		public Keyword getPolynomialKeyword_0() { return cPolynomialKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exponent=INT
		public Assignment getExponentAssignment_2() { return cExponentAssignment_2; }
		
		//INT
		public RuleCall getExponentINTTerminalRuleCall_2_0() { return cExponentINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//factor=INT
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }
		
		//INT
		public RuleCall getFactorINTTerminalRuleCall_4_0() { return cFactorINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class StopTimeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.StopTimeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStopTypAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStopTypSimulationTimeKeyword_2_0 = (Keyword)cStopTypAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStopParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStopParamINTTerminalRuleCall_4_0 = (RuleCall)cStopParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StopTimeCondition:
		//	'stop' '=' stopTyp='simulationTime' '(' stopParam=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'stop' '=' stopTyp='simulationTime' '(' stopParam=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'stop'
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//stopTyp='simulationTime'
		public Assignment getStopTypAssignment_2() { return cStopTypAssignment_2; }
		
		//'simulationTime'
		public Keyword getStopTypSimulationTimeKeyword_2_0() { return cStopTypSimulationTimeKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//stopParam=INT
		public Assignment getStopParamAssignment_4() { return cStopParamAssignment_4; }
		
		//INT
		public RuleCall getStopParamINTTerminalRuleCall_4_0() { return cStopParamINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class StopCountConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.StopCountCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStopTypAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStopTypMeasurementCountKeyword_2_0 = (Keyword)cStopTypAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStopParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStopParamINTTerminalRuleCall_4_0 = (RuleCall)cStopParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StopCountCondition:
		//	'stop' '=' stopTyp='measurementCount' '(' stopParam=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'stop' '=' stopTyp='measurementCount' '(' stopParam=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'stop'
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//stopTyp='measurementCount'
		public Assignment getStopTypAssignment_2() { return cStopTypAssignment_2; }
		
		//'measurementCount'
		public Keyword getStopTypMeasurementCountKeyword_2_0() { return cStopTypMeasurementCountKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//stopParam=INT
		public Assignment getStopParamAssignment_4() { return cStopParamAssignment_4; }
		
		//INT
		public RuleCall getStopParamINTTerminalRuleCall_4_0() { return cStopParamINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class NumberOfExperimentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.NumberOfExperiments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumberOfRepetitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumberOfRepetitionsINTTerminalRuleCall_2_0 = (RuleCall)cNumberOfRepetitionsAssignment_2.eContents().get(0);
		
		//NumberOfExperiments:
		//	'repetitions' '=' numberOfRepetitions=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'repetitions' '=' numberOfRepetitions=INT
		public Group getGroup() { return cGroup; }
		
		//'repetitions'
		public Keyword getRepetitionsKeyword_0() { return cRepetitionsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//numberOfRepetitions=INT
		public Assignment getNumberOfRepetitionsAssignment_2() { return cNumberOfRepetitionsAssignment_2; }
		
		//INT
		public RuleCall getNumberOfRepetitionsINTTerminalRuleCall_2_0() { return cNumberOfRepetitionsINTTerminalRuleCall_2_0; }
	}
	public class ToolDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ToolDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToolAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToolSTRINGTerminalRuleCall_2_0 = (RuleCall)cToolAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConfigParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigParamsConfigurationParamsParserRuleCall_4_0 = (RuleCall)cConfigParamsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ToolDefinition:
		//	'tool' '=' tool=STRING /*[exp::ToolConfiguration]*/ '{' configParams+=ConfigurationParams* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'tool' '=' tool=STRING /*[exp::ToolConfiguration]*/ '{' configParams+=ConfigurationParams* '}'
		public Group getGroup() { return cGroup; }
		
		//'tool'
		public Keyword getToolKeyword_0() { return cToolKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//tool=STRING
		public Assignment getToolAssignment_2() { return cToolAssignment_2; }
		
		//STRING
		public RuleCall getToolSTRINGTerminalRuleCall_2_0() { return cToolSTRINGTerminalRuleCall_2_0; }
		
		///*[exp::ToolConfiguration]*/ '{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//configParams+=ConfigurationParams*
		public Assignment getConfigParamsAssignment_4() { return cConfigParamsAssignment_4; }
		
		//ConfigurationParams
		public RuleCall getConfigParamsConfigurationParamsParserRuleCall_4_0() { return cConfigParamsConfigurationParamsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConfigurationParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ConfigurationParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueConfigValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConfigurationParams:
		//	key=ID '=' value=ConfigValue;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=ConfigValue
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=ConfigValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ConfigValue
		public RuleCall getValueConfigValueParserRuleCall_2_0() { return cValueConfigValueParserRuleCall_2_0; }
	}
	public class ConfigValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ConfigValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConfigValue:
		//	STRING | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SeedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.SeedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeedsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSeedListsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSeedListsListOfSeedsParserRuleCall_3_0 = (RuleCall)cSeedListsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSeedListsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSeedListsListOfSeedsParserRuleCall_4_1_0 = (RuleCall)cSeedListsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SeedDefinition:
		//	'seeds' '=' '{' seedLists+=ListOfSeeds (',' seedLists+=ListOfSeeds)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'seeds' '=' '{' seedLists+=ListOfSeeds (',' seedLists+=ListOfSeeds)* '}'
		public Group getGroup() { return cGroup; }
		
		//'seeds'
		public Keyword getSeedsKeyword_0() { return cSeedsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//seedLists+=ListOfSeeds
		public Assignment getSeedListsAssignment_3() { return cSeedListsAssignment_3; }
		
		//ListOfSeeds
		public RuleCall getSeedListsListOfSeedsParserRuleCall_3_0() { return cSeedListsListOfSeedsParserRuleCall_3_0; }
		
		//(',' seedLists+=ListOfSeeds)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//seedLists+=ListOfSeeds
		public Assignment getSeedListsAssignment_4_1() { return cSeedListsAssignment_4_1; }
		
		//ListOfSeeds
		public RuleCall getSeedListsListOfSeedsParserRuleCall_4_1_0() { return cSeedListsListOfSeedsParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ListOfSeedsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ListOfSeeds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSeedsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSeedsINTTerminalRuleCall_1_0 = (RuleCall)cSeedsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSeedsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSeedsINTTerminalRuleCall_2_1_0 = (RuleCall)cSeedsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListOfSeeds:
		//	'{' seeds+=INT (',' seeds+=INT)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' seeds+=INT (',' seeds+=INT)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//seeds+=INT
		public Assignment getSeedsAssignment_1() { return cSeedsAssignment_1; }
		
		//INT
		public RuleCall getSeedsINTTerminalRuleCall_1_0() { return cSeedsINTTerminalRuleCall_1_0; }
		
		//(',' seeds+=INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//seeds+=INT
		public Assignment getSeedsAssignment_2_1() { return cSeedsAssignment_2_1; }
		
		//INT
		public RuleCall getSeedsINTTerminalRuleCall_2_1_0() { return cSeedsINTTerminalRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExperimentDatasourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.experimentautomation.dsl.ExpAuto.ExperimentDatasource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceDatasourceCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceDatasourceIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceDatasourceCrossReference_2_0.eContents().get(1);
		
		//ExperimentDatasource:
		//	'datasource' '=' source=[Datasource];
		@Override public ParserRule getRule() { return rule; }
		
		//'datasource' '=' source=[Datasource]
		public Group getGroup() { return cGroup; }
		
		//'datasource'
		public Keyword getDatasourceKeyword_0() { return cDatasourceKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//source=[Datasource]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Datasource]
		public CrossReference getSourceDatasourceCrossReference_2_0() { return cSourceDatasourceCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceDatasourceIDTerminalRuleCall_2_0_1() { return cSourceDatasourceIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final DatasourceElements pDatasource;
	private final DatasourceSpecificationElements pDatasourceSpecification;
	private final FileDatasourceSpecificationElements pFileDatasourceSpecification;
	private final MemoryDatasourceSpecificationElements pMemoryDatasourceSpecification;
	private final ExperimentElements pExperiment;
	private final ExperimentSpecificationsElements pExperimentSpecifications;
	private final DescriptionElements pDescription;
	private final InitialModelElements pInitialModel;
	private final InitSpecificationsElements pInitSpecifications;
	private final AllocationModelElements pAllocationModel;
	private final UsageModelElements pUsageModel;
	private final MiddlewareRepositoryElements pMiddlewareRepository;
	private final EventMiddlewareRepositoryElements pEventMiddlewareRepository;
	private final MonitorRepositoryElements pMonitorRepository;
	private final VariationElements pVariation;
	private final NestedIntervalsValueProviderElements pNestedIntervalsValueProvider;
	private final SetValueProviderElements pSetValueProvider;
	private final LinearValueProviderElements pLinearValueProvider;
	private final ExponentialValueProviderElements pExponentialValueProvider;
	private final PolynomialValueProviderElements pPolynomialValueProvider;
	private final StopTimeConditionElements pStopTimeCondition;
	private final StopCountConditionElements pStopCountCondition;
	private final NumberOfExperimentsElements pNumberOfExperiments;
	private final ToolDefinitionElements pToolDefinition;
	private final ConfigurationParamsElements pConfigurationParams;
	private final ConfigValueElements pConfigValue;
	private final SeedDefinitionElements pSeedDefinition;
	private final ListOfSeedsElements pListOfSeeds;
	private final ExperimentDatasourceElements pExperimentDatasource;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpAutoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pDatasource = new DatasourceElements();
		this.pDatasourceSpecification = new DatasourceSpecificationElements();
		this.pFileDatasourceSpecification = new FileDatasourceSpecificationElements();
		this.pMemoryDatasourceSpecification = new MemoryDatasourceSpecificationElements();
		this.pExperiment = new ExperimentElements();
		this.pExperimentSpecifications = new ExperimentSpecificationsElements();
		this.pDescription = new DescriptionElements();
		this.pInitialModel = new InitialModelElements();
		this.pInitSpecifications = new InitSpecificationsElements();
		this.pAllocationModel = new AllocationModelElements();
		this.pUsageModel = new UsageModelElements();
		this.pMiddlewareRepository = new MiddlewareRepositoryElements();
		this.pEventMiddlewareRepository = new EventMiddlewareRepositoryElements();
		this.pMonitorRepository = new MonitorRepositoryElements();
		this.pVariation = new VariationElements();
		this.pNestedIntervalsValueProvider = new NestedIntervalsValueProviderElements();
		this.pSetValueProvider = new SetValueProviderElements();
		this.pLinearValueProvider = new LinearValueProviderElements();
		this.pExponentialValueProvider = new ExponentialValueProviderElements();
		this.pPolynomialValueProvider = new PolynomialValueProviderElements();
		this.pStopTimeCondition = new StopTimeConditionElements();
		this.pStopCountCondition = new StopCountConditionElements();
		this.pNumberOfExperiments = new NumberOfExperimentsElements();
		this.pToolDefinition = new ToolDefinitionElements();
		this.pConfigurationParams = new ConfigurationParamsElements();
		this.pConfigValue = new ConfigValueElements();
		this.pSeedDefinition = new SeedDefinitionElements();
		this.pListOfSeeds = new ListOfSeedsElements();
		this.pExperimentDatasource = new ExperimentDatasourceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.experimentautomation.dsl.ExpAuto".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	imports+=Import+
	//	datasources+=Datasource+
	//	experiments+=Experiment+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//	'import' path=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Datasource:
	//	'datasource' name=ID ':' specification=DatasourceSpecification;
	public DatasourceElements getDatasourceAccess() {
		return pDatasource;
	}
	
	public ParserRule getDatasourceRule() {
		return getDatasourceAccess().getRule();
	}
	
	//DatasourceSpecification:
	//	specification=(FileDatasourceSpecification | MemoryDatasourceSpecification);
	public DatasourceSpecificationElements getDatasourceSpecificationAccess() {
		return pDatasourceSpecification;
	}
	
	public ParserRule getDatasourceSpecificationRule() {
		return getDatasourceSpecificationAccess().getRule();
	}
	
	//FileDatasourceSpecification:
	//	sourceType='EDP2' '(' sourceURI=STRING ')';
	public FileDatasourceSpecificationElements getFileDatasourceSpecificationAccess() {
		return pFileDatasourceSpecification;
	}
	
	public ParserRule getFileDatasourceSpecificationRule() {
		return getFileDatasourceSpecificationAccess().getRule();
	}
	
	//MemoryDatasourceSpecification:
	//	sourceType='EDP2';
	public MemoryDatasourceSpecificationElements getMemoryDatasourceSpecificationAccess() {
		return pMemoryDatasourceSpecification;
	}
	
	public ParserRule getMemoryDatasourceSpecificationRule() {
		return getMemoryDatasourceSpecificationAccess().getRule();
	}
	
	//Experiment:
	//	'experiment' name=ID ':' design=('FullFactorial' | 'OneFactor')
	//	'{'
	//	experimentSpecifications=ExperimentSpecifications
	//	'}';
	public ExperimentElements getExperimentAccess() {
		return pExperiment;
	}
	
	public ParserRule getExperimentRule() {
		return getExperimentAccess().getRule();
	}
	
	//ExperimentSpecifications:
	//	specifications+=(Description | InitialModel | Variation | StopTimeCondition | StopCountCondition |
	//	NumberOfExperiments | ToolDefinition | SeedDefinition | ExperimentDatasource)+;
	public ExperimentSpecificationsElements getExperimentSpecificationsAccess() {
		return pExperimentSpecifications;
	}
	
	public ParserRule getExperimentSpecificationsRule() {
		return getExperimentSpecificationsAccess().getRule();
	}
	
	//Description:
	//	'description' '=' description=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//InitialModel:
	//	'initial' '=' modeltyp='PCM'
	//	'{'
	//	initSpecifications=InitSpecifications
	//	'}';
	public InitialModelElements getInitialModelAccess() {
		return pInitialModel;
	}
	
	public ParserRule getInitialModelRule() {
		return getInitialModelAccess().getRule();
	}
	
	//InitSpecifications:
	//	specifications+=(AllocationModel | UsageModel | MiddlewareRepository | EventMiddlewareRepository |
	//	MonitorRepository)+;
	public InitSpecificationsElements getInitSpecificationsAccess() {
		return pInitSpecifications;
	}
	
	public ParserRule getInitSpecificationsRule() {
		return getInitSpecificationsAccess().getRule();
	}
	
	//AllocationModel:
	//	'allocation' '=' allocation=STRING;
	public AllocationModelElements getAllocationModelAccess() {
		return pAllocationModel;
	}
	
	public ParserRule getAllocationModelRule() {
		return getAllocationModelAccess().getRule();
	}
	
	//UsageModel:
	//	'usageModel' '=' usageModel=STRING;
	public UsageModelElements getUsageModelAccess() {
		return pUsageModel;
	}
	
	public ParserRule getUsageModelRule() {
		return getUsageModelAccess().getRule();
	}
	
	//MiddlewareRepository:
	//	'middlewareRepository' '=' middlewareRepository=STRING;
	public MiddlewareRepositoryElements getMiddlewareRepositoryAccess() {
		return pMiddlewareRepository;
	}
	
	public ParserRule getMiddlewareRepositoryRule() {
		return getMiddlewareRepositoryAccess().getRule();
	}
	
	//EventMiddlewareRepository:
	//	'eventMiddlewareRepository' '=' eventMiddelwareRepository=STRING;
	public EventMiddlewareRepositoryElements getEventMiddlewareRepositoryAccess() {
		return pEventMiddlewareRepository;
	}
	
	public ParserRule getEventMiddlewareRepositoryRule() {
		return getEventMiddlewareRepositoryAccess().getRule();
	}
	
	//MonitorRepository:
	//	'monitorRepository' '=' monitorRepository=STRING;
	public MonitorRepositoryElements getMonitorRepositoryAccess() {
		return pMonitorRepository;
	}
	
	public ParserRule getMonitorRepositoryRule() {
		return getMonitorRepositoryAccess().getRule();
	}
	
	//Variation:
	//	'variation' '=' variationTyp=[ValueVariation] name=ID
	//	'{'
	//	'target' '=' target=[Identifier]
	//	'maxVariations' '=' maxVariations=INT
	//	'values' '=' valueProvider=(NestedIntervalsValueProvider | SetValueProvider | LinearValueProvider |
	//	ExponentialValueProvider | PolynomialValueProvider)
	//	'}';
	public VariationElements getVariationAccess() {
		return pVariation;
	}
	
	public ParserRule getVariationRule() {
		return getVariationAccess().getRule();
	}
	
	//NestedIntervalsValueProvider:
	//	'[' min=INT ',' max=INT ']' | 'nestedIntervall' '(' min=INT ',' max=INT ')';
	public NestedIntervalsValueProviderElements getNestedIntervalsValueProviderAccess() {
		return pNestedIntervalsValueProvider;
	}
	
	public ParserRule getNestedIntervalsValueProviderRule() {
		return getNestedIntervalsValueProviderAccess().getRule();
	}
	
	//SetValueProvider:
	//	'{' values+=INT (',' values+=INT)* '}' | 'setValues' '(' values+=INT (',' values+=INT)* ')';
	public SetValueProviderElements getSetValueProviderAccess() {
		return pSetValueProvider;
	}
	
	public ParserRule getSetValueProviderRule() {
		return getSetValueProviderAccess().getRule();
	}
	
	//LinearValueProvider:
	//	'linear' '(' summand=INT ',' factor=INT ')';
	public LinearValueProviderElements getLinearValueProviderAccess() {
		return pLinearValueProvider;
	}
	
	public ParserRule getLinearValueProviderRule() {
		return getLinearValueProviderAccess().getRule();
	}
	
	//ExponentialValueProvider:
	//	'exponential' '(' base=INT ')';
	public ExponentialValueProviderElements getExponentialValueProviderAccess() {
		return pExponentialValueProvider;
	}
	
	public ParserRule getExponentialValueProviderRule() {
		return getExponentialValueProviderAccess().getRule();
	}
	
	//PolynomialValueProvider:
	//	'polynomial' '(' exponent=INT ',' factor=INT ')';
	public PolynomialValueProviderElements getPolynomialValueProviderAccess() {
		return pPolynomialValueProvider;
	}
	
	public ParserRule getPolynomialValueProviderRule() {
		return getPolynomialValueProviderAccess().getRule();
	}
	
	//StopTimeCondition:
	//	'stop' '=' stopTyp='simulationTime' '(' stopParam=INT ')';
	public StopTimeConditionElements getStopTimeConditionAccess() {
		return pStopTimeCondition;
	}
	
	public ParserRule getStopTimeConditionRule() {
		return getStopTimeConditionAccess().getRule();
	}
	
	//StopCountCondition:
	//	'stop' '=' stopTyp='measurementCount' '(' stopParam=INT ')';
	public StopCountConditionElements getStopCountConditionAccess() {
		return pStopCountCondition;
	}
	
	public ParserRule getStopCountConditionRule() {
		return getStopCountConditionAccess().getRule();
	}
	
	//NumberOfExperiments:
	//	'repetitions' '=' numberOfRepetitions=INT;
	public NumberOfExperimentsElements getNumberOfExperimentsAccess() {
		return pNumberOfExperiments;
	}
	
	public ParserRule getNumberOfExperimentsRule() {
		return getNumberOfExperimentsAccess().getRule();
	}
	
	//ToolDefinition:
	//	'tool' '=' tool=STRING /*[exp::ToolConfiguration]*/ '{' configParams+=ConfigurationParams* '}';
	public ToolDefinitionElements getToolDefinitionAccess() {
		return pToolDefinition;
	}
	
	public ParserRule getToolDefinitionRule() {
		return getToolDefinitionAccess().getRule();
	}
	
	//ConfigurationParams:
	//	key=ID '=' value=ConfigValue;
	public ConfigurationParamsElements getConfigurationParamsAccess() {
		return pConfigurationParams;
	}
	
	public ParserRule getConfigurationParamsRule() {
		return getConfigurationParamsAccess().getRule();
	}
	
	//ConfigValue:
	//	STRING | INT;
	public ConfigValueElements getConfigValueAccess() {
		return pConfigValue;
	}
	
	public ParserRule getConfigValueRule() {
		return getConfigValueAccess().getRule();
	}
	
	//SeedDefinition:
	//	'seeds' '=' '{' seedLists+=ListOfSeeds (',' seedLists+=ListOfSeeds)* '}';
	public SeedDefinitionElements getSeedDefinitionAccess() {
		return pSeedDefinition;
	}
	
	public ParserRule getSeedDefinitionRule() {
		return getSeedDefinitionAccess().getRule();
	}
	
	//ListOfSeeds:
	//	'{' seeds+=INT (',' seeds+=INT)* '}';
	public ListOfSeedsElements getListOfSeedsAccess() {
		return pListOfSeeds;
	}
	
	public ParserRule getListOfSeedsRule() {
		return getListOfSeedsAccess().getRule();
	}
	
	//ExperimentDatasource:
	//	'datasource' '=' source=[Datasource];
	public ExperimentDatasourceElements getExperimentDatasourceAccess() {
		return pExperimentDatasource;
	}
	
	public ParserRule getExperimentDatasourceRule() {
		return getExperimentDatasourceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
